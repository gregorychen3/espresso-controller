# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import espresso_pb2 as espresso__pb2


class EspressoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BoilerTemperature = channel.unary_stream(
                '/espressopb.Espresso/BoilerTemperature',
                request_serializer=espresso__pb2.TemperatureStreamRequest.SerializeToString,
                response_deserializer=espresso__pb2.TemperatureStreamResponse.FromString,
                )
        self.GetConfiguration = channel.unary_unary(
                '/espressopb.Espresso/GetConfiguration',
                request_serializer=espresso__pb2.GetConfigurationRequest.SerializeToString,
                response_deserializer=espresso__pb2.Configuration.FromString,
                )
        self.SetConfiguration = channel.unary_unary(
                '/espressopb.Espresso/SetConfiguration',
                request_serializer=espresso__pb2.Configuration.SerializeToString,
                response_deserializer=espresso__pb2.Configuration.FromString,
                )


class EspressoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BoilerTemperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EspressoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BoilerTemperature': grpc.unary_stream_rpc_method_handler(
                    servicer.BoilerTemperature,
                    request_deserializer=espresso__pb2.TemperatureStreamRequest.FromString,
                    response_serializer=espresso__pb2.TemperatureStreamResponse.SerializeToString,
            ),
            'GetConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfiguration,
                    request_deserializer=espresso__pb2.GetConfigurationRequest.FromString,
                    response_serializer=espresso__pb2.Configuration.SerializeToString,
            ),
            'SetConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfiguration,
                    request_deserializer=espresso__pb2.Configuration.FromString,
                    response_serializer=espresso__pb2.Configuration.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'espressopb.Espresso', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Espresso(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BoilerTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/espressopb.Espresso/BoilerTemperature',
            espresso__pb2.TemperatureStreamRequest.SerializeToString,
            espresso__pb2.TemperatureStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/espressopb.Espresso/GetConfiguration',
            espresso__pb2.GetConfigurationRequest.SerializeToString,
            espresso__pb2.Configuration.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/espressopb.Espresso/SetConfiguration',
            espresso__pb2.Configuration.SerializeToString,
            espresso__pb2.Configuration.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
