// Code generated by protoc-gen-go. DO NOT EDIT.
// source: espresso.proto

package espressopb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TemperatureSample struct {
	Value                float32              `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	ObservedAt           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=observed_at,json=observedAt,proto3" json:"observed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TemperatureSample) Reset()         { *m = TemperatureSample{} }
func (m *TemperatureSample) String() string { return proto.CompactTextString(m) }
func (*TemperatureSample) ProtoMessage()    {}
func (*TemperatureSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_445399412d1702d2, []int{0}
}

func (m *TemperatureSample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureSample.Unmarshal(m, b)
}
func (m *TemperatureSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureSample.Marshal(b, m, deterministic)
}
func (m *TemperatureSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureSample.Merge(m, src)
}
func (m *TemperatureSample) XXX_Size() int {
	return xxx_messageInfo_TemperatureSample.Size(m)
}
func (m *TemperatureSample) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureSample.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureSample proto.InternalMessageInfo

func (m *TemperatureSample) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TemperatureSample) GetObservedAt() *timestamp.Timestamp {
	if m != nil {
		return m.ObservedAt
	}
	return nil
}

type WatchBoilerTemperatureRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBoilerTemperatureRequest) Reset()         { *m = WatchBoilerTemperatureRequest{} }
func (m *WatchBoilerTemperatureRequest) String() string { return proto.CompactTextString(m) }
func (*WatchBoilerTemperatureRequest) ProtoMessage()    {}
func (*WatchBoilerTemperatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_445399412d1702d2, []int{1}
}

func (m *WatchBoilerTemperatureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBoilerTemperatureRequest.Unmarshal(m, b)
}
func (m *WatchBoilerTemperatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBoilerTemperatureRequest.Marshal(b, m, deterministic)
}
func (m *WatchBoilerTemperatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBoilerTemperatureRequest.Merge(m, src)
}
func (m *WatchBoilerTemperatureRequest) XXX_Size() int {
	return xxx_messageInfo_WatchBoilerTemperatureRequest.Size(m)
}
func (m *WatchBoilerTemperatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBoilerTemperatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBoilerTemperatureRequest proto.InternalMessageInfo

type WatchBoilerTemperatureResponse struct {
	Sample               *TemperatureSample `protobuf:"bytes,1,opt,name=sample,proto3" json:"sample,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *WatchBoilerTemperatureResponse) Reset()         { *m = WatchBoilerTemperatureResponse{} }
func (m *WatchBoilerTemperatureResponse) String() string { return proto.CompactTextString(m) }
func (*WatchBoilerTemperatureResponse) ProtoMessage()    {}
func (*WatchBoilerTemperatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_445399412d1702d2, []int{2}
}

func (m *WatchBoilerTemperatureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBoilerTemperatureResponse.Unmarshal(m, b)
}
func (m *WatchBoilerTemperatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBoilerTemperatureResponse.Marshal(b, m, deterministic)
}
func (m *WatchBoilerTemperatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBoilerTemperatureResponse.Merge(m, src)
}
func (m *WatchBoilerTemperatureResponse) XXX_Size() int {
	return xxx_messageInfo_WatchBoilerTemperatureResponse.Size(m)
}
func (m *WatchBoilerTemperatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBoilerTemperatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBoilerTemperatureResponse proto.InternalMessageInfo

func (m *WatchBoilerTemperatureResponse) GetSample() *TemperatureSample {
	if m != nil {
		return m.Sample
	}
	return nil
}

type GetPIDConfigRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPIDConfigRequest) Reset()         { *m = GetPIDConfigRequest{} }
func (m *GetPIDConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetPIDConfigRequest) ProtoMessage()    {}
func (*GetPIDConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_445399412d1702d2, []int{3}
}

func (m *GetPIDConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPIDConfigRequest.Unmarshal(m, b)
}
func (m *GetPIDConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPIDConfigRequest.Marshal(b, m, deterministic)
}
func (m *GetPIDConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPIDConfigRequest.Merge(m, src)
}
func (m *GetPIDConfigRequest) XXX_Size() int {
	return xxx_messageInfo_GetPIDConfigRequest.Size(m)
}
func (m *GetPIDConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPIDConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPIDConfigRequest proto.InternalMessageInfo

type PIDConfig struct {
	Temperature          float32              `protobuf:"fixed32,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	P                    float32              `protobuf:"fixed32,2,opt,name=p,proto3" json:"p,omitempty"`
	I                    float32              `protobuf:"fixed32,3,opt,name=i,proto3" json:"i,omitempty"`
	D                    float32              `protobuf:"fixed32,4,opt,name=d,proto3" json:"d,omitempty"`
	SetAt                *timestamp.Timestamp `protobuf:"bytes,5,opt,name=set_at,json=setAt,proto3" json:"set_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PIDConfig) Reset()         { *m = PIDConfig{} }
func (m *PIDConfig) String() string { return proto.CompactTextString(m) }
func (*PIDConfig) ProtoMessage()    {}
func (*PIDConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_445399412d1702d2, []int{4}
}

func (m *PIDConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PIDConfig.Unmarshal(m, b)
}
func (m *PIDConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PIDConfig.Marshal(b, m, deterministic)
}
func (m *PIDConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PIDConfig.Merge(m, src)
}
func (m *PIDConfig) XXX_Size() int {
	return xxx_messageInfo_PIDConfig.Size(m)
}
func (m *PIDConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PIDConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PIDConfig proto.InternalMessageInfo

func (m *PIDConfig) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *PIDConfig) GetP() float32 {
	if m != nil {
		return m.P
	}
	return 0
}

func (m *PIDConfig) GetI() float32 {
	if m != nil {
		return m.I
	}
	return 0
}

func (m *PIDConfig) GetD() float32 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *PIDConfig) GetSetAt() *timestamp.Timestamp {
	if m != nil {
		return m.SetAt
	}
	return nil
}

func init() {
	proto.RegisterType((*TemperatureSample)(nil), "espressopb.TemperatureSample")
	proto.RegisterType((*WatchBoilerTemperatureRequest)(nil), "espressopb.WatchBoilerTemperatureRequest")
	proto.RegisterType((*WatchBoilerTemperatureResponse)(nil), "espressopb.WatchBoilerTemperatureResponse")
	proto.RegisterType((*GetPIDConfigRequest)(nil), "espressopb.GetPIDConfigRequest")
	proto.RegisterType((*PIDConfig)(nil), "espressopb.PIDConfig")
}

func init() {
	proto.RegisterFile("espresso.proto", fileDescriptor_445399412d1702d2)
}

var fileDescriptor_445399412d1702d2 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x4f, 0xfa, 0x40,
	0x10, 0xc5, 0xb3, 0xfd, 0x7e, 0x21, 0x3a, 0x25, 0x26, 0xae, 0x62, 0x9a, 0x26, 0x08, 0xe9, 0x09,
	0x3d, 0x14, 0xc5, 0x78, 0xd2, 0x0b, 0xfe, 0x8c, 0x37, 0x53, 0x48, 0x38, 0x9a, 0x56, 0x06, 0x6c,
	0xd2, 0xb2, 0x4b, 0x77, 0xca, 0x3f, 0xe0, 0xcd, 0xbf, 0xda, 0xd0, 0xa5, 0xb2, 0x89, 0x45, 0x3d,
	0xbe, 0xdd, 0x37, 0xf3, 0xe6, 0x7d, 0x60, 0x0f, 0x95, 0xcc, 0x50, 0x29, 0xe1, 0xcb, 0x4c, 0x90,
	0xe0, 0x50, 0x6a, 0x19, 0xb9, 0xed, 0x99, 0x10, 0xb3, 0x04, 0x7b, 0xc5, 0x4f, 0x94, 0x4f, 0x7b,
	0x14, 0xa7, 0xa8, 0x28, 0x4c, 0xa5, 0x36, 0x7b, 0x53, 0xd8, 0x1f, 0x61, 0x2a, 0x31, 0x0b, 0x29,
	0xcf, 0x70, 0x18, 0xa6, 0x32, 0x41, 0x7e, 0x08, 0xb5, 0x65, 0x98, 0xe4, 0xe8, 0xb0, 0x0e, 0xeb,
	0x5a, 0x81, 0x16, 0xfc, 0x0a, 0x6c, 0x11, 0x29, 0xcc, 0x96, 0x38, 0x79, 0x09, 0xc9, 0xb1, 0x3a,
	0xac, 0x6b, 0xf7, 0x5d, 0x5f, 0x27, 0xf8, 0x65, 0x82, 0x3f, 0x2a, 0x13, 0x02, 0x28, 0xed, 0x03,
	0xf2, 0xda, 0xd0, 0x1a, 0x87, 0xf4, 0xfa, 0x76, 0x23, 0xe2, 0x04, 0x33, 0x23, 0x32, 0xc0, 0x45,
	0x8e, 0x8a, 0xbc, 0x31, 0x1c, 0x6f, 0x33, 0x28, 0x29, 0xe6, 0x0a, 0xf9, 0x25, 0xd4, 0x55, 0x71,
	0x5f, 0x71, 0x96, 0xdd, 0x6f, 0xf9, 0x9b, 0xa2, 0xfe, 0xb7, 0x12, 0xc1, 0xda, 0xec, 0x35, 0xe1,
	0xe0, 0x11, 0xe9, 0xf9, 0xe9, 0xee, 0x56, 0xcc, 0xa7, 0xf1, 0xac, 0xcc, 0xfb, 0x60, 0xb0, 0xfb,
	0xf5, 0xc8, 0x3b, 0x60, 0xd3, 0x66, 0xc3, 0xba, 0xb7, 0xf9, 0xc4, 0x1b, 0xc0, 0x64, 0xd1, 0xd9,
	0x0a, 0x98, 0x5c, 0xa9, 0xd8, 0xf9, 0xa7, 0x55, 0xbc, 0x52, 0x13, 0xe7, 0xbf, 0x56, 0x13, 0x7e,
	0x0e, 0x75, 0x85, 0xb4, 0x42, 0x54, 0xfb, 0x15, 0x51, 0x4d, 0x21, 0x0d, 0xa8, 0xff, 0x6e, 0xc1,
	0xce, 0xfd, 0xba, 0x0c, 0x5f, 0xc0, 0x51, 0x35, 0x09, 0x7e, 0x62, 0x36, 0xfe, 0x11, 0xa7, 0x7b,
	0xfa, 0x17, 0xab, 0x06, 0x7b, 0xc6, 0xf8, 0x03, 0x34, 0x4c, 0x46, 0xbc, 0x6d, 0x4e, 0x57, 0xd0,
	0x73, 0x9b, 0xa6, 0x61, 0x33, 0x77, 0x0d, 0x8d, 0xa1, 0xb9, 0xa7, 0xda, 0xb6, 0x65, 0x3a, 0xaa,
	0x17, 0x80, 0x2e, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x48, 0x7f, 0xd2, 0x0f, 0xd1, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EspressoClient is the client API for Espresso service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EspressoClient interface {
	WatchBoilerTemperature(ctx context.Context, in *WatchBoilerTemperatureRequest, opts ...grpc.CallOption) (Espresso_WatchBoilerTemperatureClient, error)
	GetPIDConfig(ctx context.Context, in *GetPIDConfigRequest, opts ...grpc.CallOption) (*PIDConfig, error)
	SetPIDConfig(ctx context.Context, in *PIDConfig, opts ...grpc.CallOption) (*PIDConfig, error)
}

type espressoClient struct {
	cc grpc.ClientConnInterface
}

func NewEspressoClient(cc grpc.ClientConnInterface) EspressoClient {
	return &espressoClient{cc}
}

func (c *espressoClient) WatchBoilerTemperature(ctx context.Context, in *WatchBoilerTemperatureRequest, opts ...grpc.CallOption) (Espresso_WatchBoilerTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Espresso_serviceDesc.Streams[0], "/espressopb.Espresso/WatchBoilerTemperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &espressoWatchBoilerTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Espresso_WatchBoilerTemperatureClient interface {
	Recv() (*WatchBoilerTemperatureResponse, error)
	grpc.ClientStream
}

type espressoWatchBoilerTemperatureClient struct {
	grpc.ClientStream
}

func (x *espressoWatchBoilerTemperatureClient) Recv() (*WatchBoilerTemperatureResponse, error) {
	m := new(WatchBoilerTemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *espressoClient) GetPIDConfig(ctx context.Context, in *GetPIDConfigRequest, opts ...grpc.CallOption) (*PIDConfig, error) {
	out := new(PIDConfig)
	err := c.cc.Invoke(ctx, "/espressopb.Espresso/GetPIDConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *espressoClient) SetPIDConfig(ctx context.Context, in *PIDConfig, opts ...grpc.CallOption) (*PIDConfig, error) {
	out := new(PIDConfig)
	err := c.cc.Invoke(ctx, "/espressopb.Espresso/SetPIDConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EspressoServer is the server API for Espresso service.
type EspressoServer interface {
	WatchBoilerTemperature(*WatchBoilerTemperatureRequest, Espresso_WatchBoilerTemperatureServer) error
	GetPIDConfig(context.Context, *GetPIDConfigRequest) (*PIDConfig, error)
	SetPIDConfig(context.Context, *PIDConfig) (*PIDConfig, error)
}

// UnimplementedEspressoServer can be embedded to have forward compatible implementations.
type UnimplementedEspressoServer struct {
}

func (*UnimplementedEspressoServer) WatchBoilerTemperature(req *WatchBoilerTemperatureRequest, srv Espresso_WatchBoilerTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBoilerTemperature not implemented")
}
func (*UnimplementedEspressoServer) GetPIDConfig(ctx context.Context, req *GetPIDConfigRequest) (*PIDConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPIDConfig not implemented")
}
func (*UnimplementedEspressoServer) SetPIDConfig(ctx context.Context, req *PIDConfig) (*PIDConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPIDConfig not implemented")
}

func RegisterEspressoServer(s *grpc.Server, srv EspressoServer) {
	s.RegisterService(&_Espresso_serviceDesc, srv)
}

func _Espresso_WatchBoilerTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBoilerTemperatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EspressoServer).WatchBoilerTemperature(m, &espressoWatchBoilerTemperatureServer{stream})
}

type Espresso_WatchBoilerTemperatureServer interface {
	Send(*WatchBoilerTemperatureResponse) error
	grpc.ServerStream
}

type espressoWatchBoilerTemperatureServer struct {
	grpc.ServerStream
}

func (x *espressoWatchBoilerTemperatureServer) Send(m *WatchBoilerTemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Espresso_GetPIDConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPIDConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EspressoServer).GetPIDConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espressopb.Espresso/GetPIDConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EspressoServer).GetPIDConfig(ctx, req.(*GetPIDConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Espresso_SetPIDConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PIDConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EspressoServer).SetPIDConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espressopb.Espresso/SetPIDConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EspressoServer).SetPIDConfig(ctx, req.(*PIDConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Espresso_serviceDesc = grpc.ServiceDesc{
	ServiceName: "espressopb.Espresso",
	HandlerType: (*EspressoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPIDConfig",
			Handler:    _Espresso_GetPIDConfig_Handler,
		},
		{
			MethodName: "SetPIDConfig",
			Handler:    _Espresso_SetPIDConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBoilerTemperature",
			Handler:       _Espresso_WatchBoilerTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "espresso.proto",
}
